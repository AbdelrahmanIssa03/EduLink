// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ai_api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";

export const protobufPackage = "aiAPI";

export interface UploadFilesRequest {
  files: File[];
  className: string;
}

export interface File {
  data: Uint8Array;
  fileName: string;
}

export interface UploadFilesResponse {
  success: boolean;
  errorMessages: string[];
}

export interface SendAudioRequest {
  audioData: Uint8Array;
  className: string;
}

export interface SendAudioResponse {
  success: boolean;
  errorMessages: string[];
}

function createBaseUploadFilesRequest(): UploadFilesRequest {
  return { files: [], className: "" };
}

export const UploadFilesRequest: MessageFns<UploadFilesRequest> = {
  encode(message: UploadFilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.files) {
      File.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.className !== "") {
      writer.uint32(18).string(message.className);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.files.push(File.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.className = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFilesRequest {
    return {
      files: globalThis.Array.isArray(object?.files) ? object.files.map((e: any) => File.fromJSON(e)) : [],
      className: isSet(object.className) ? globalThis.String(object.className) : "",
    };
  },

  toJSON(message: UploadFilesRequest): unknown {
    const obj: any = {};
    if (message.files?.length) {
      obj.files = message.files.map((e) => File.toJSON(e));
    }
    if (message.className !== "") {
      obj.className = message.className;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadFilesRequest>, I>>(base?: I): UploadFilesRequest {
    return UploadFilesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadFilesRequest>, I>>(object: I): UploadFilesRequest {
    const message = createBaseUploadFilesRequest();
    message.files = object.files?.map((e) => File.fromPartial(e)) || [];
    message.className = object.className ?? "";
    return message;
  },
};

function createBaseFile(): File {
  return { data: new Uint8Array(0), fileName: "" };
}

export const File: MessageFns<File> = {
  encode(message: File, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    if (message.fileName !== "") {
      writer.uint32(18).string(message.fileName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): File {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): File {
    return {
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
    };
  },

  toJSON(message: File): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<File>, I>>(base?: I): File {
    return File.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<File>, I>>(object: I): File {
    const message = createBaseFile();
    message.data = object.data ?? new Uint8Array(0);
    message.fileName = object.fileName ?? "";
    return message;
  },
};

function createBaseUploadFilesResponse(): UploadFilesResponse {
  return { success: false, errorMessages: [] };
}

export const UploadFilesResponse: MessageFns<UploadFilesResponse> = {
  encode(message: UploadFilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    for (const v of message.errorMessages) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errorMessages.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFilesResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      errorMessages: globalThis.Array.isArray(object?.errorMessages)
        ? object.errorMessages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: UploadFilesResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessages?.length) {
      obj.errorMessages = message.errorMessages;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadFilesResponse>, I>>(base?: I): UploadFilesResponse {
    return UploadFilesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadFilesResponse>, I>>(object: I): UploadFilesResponse {
    const message = createBaseUploadFilesResponse();
    message.success = object.success ?? false;
    message.errorMessages = object.errorMessages?.map((e) => e) || [];
    return message;
  },
};

function createBaseSendAudioRequest(): SendAudioRequest {
  return { audioData: new Uint8Array(0), className: "" };
}

export const SendAudioRequest: MessageFns<SendAudioRequest> = {
  encode(message: SendAudioRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audioData.length !== 0) {
      writer.uint32(10).bytes(message.audioData);
    }
    if (message.className !== "") {
      writer.uint32(18).string(message.className);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendAudioRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendAudioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.audioData = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.className = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendAudioRequest {
    return {
      audioData: isSet(object.audioData) ? bytesFromBase64(object.audioData) : new Uint8Array(0),
      className: isSet(object.className) ? globalThis.String(object.className) : "",
    };
  },

  toJSON(message: SendAudioRequest): unknown {
    const obj: any = {};
    if (message.audioData.length !== 0) {
      obj.audioData = base64FromBytes(message.audioData);
    }
    if (message.className !== "") {
      obj.className = message.className;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendAudioRequest>, I>>(base?: I): SendAudioRequest {
    return SendAudioRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendAudioRequest>, I>>(object: I): SendAudioRequest {
    const message = createBaseSendAudioRequest();
    message.audioData = object.audioData ?? new Uint8Array(0);
    message.className = object.className ?? "";
    return message;
  },
};

function createBaseSendAudioResponse(): SendAudioResponse {
  return { success: false, errorMessages: [] };
}

export const SendAudioResponse: MessageFns<SendAudioResponse> = {
  encode(message: SendAudioResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    for (const v of message.errorMessages) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendAudioResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendAudioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errorMessages.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendAudioResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      errorMessages: globalThis.Array.isArray(object?.errorMessages)
        ? object.errorMessages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SendAudioResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessages?.length) {
      obj.errorMessages = message.errorMessages;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendAudioResponse>, I>>(base?: I): SendAudioResponse {
    return SendAudioResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendAudioResponse>, I>>(object: I): SendAudioResponse {
    const message = createBaseSendAudioResponse();
    message.success = object.success ?? false;
    message.errorMessages = object.errorMessages?.map((e) => e) || [];
    return message;
  },
};

export interface SessionManager {
  SendAudio(request: DeepPartial<SendAudioRequest>, metadata?: grpc.Metadata): Promise<SendAudioResponse>;
}

export class SessionManagerClientImpl implements SessionManager {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.SendAudio = this.SendAudio.bind(this);
  }

  SendAudio(request: DeepPartial<SendAudioRequest>, metadata?: grpc.Metadata): Promise<SendAudioResponse> {
    return this.rpc.unary(SessionManagerSendAudioDesc, SendAudioRequest.fromPartial(request), metadata);
  }
}

export const SessionManagerDesc = { serviceName: "aiAPI.SessionManager" };

export const SessionManagerSendAudioDesc: UnaryMethodDefinitionish = {
  methodName: "SendAudio",
  service: SessionManagerDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SendAudioRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SendAudioResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export interface ClassManager {
  UploadFiles(request: DeepPartial<UploadFilesRequest>, metadata?: grpc.Metadata): Promise<UploadFilesResponse>;
}

export class ClassManagerClientImpl implements ClassManager {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.UploadFiles = this.UploadFiles.bind(this);
  }

  UploadFiles(request: DeepPartial<UploadFilesRequest>, metadata?: grpc.Metadata): Promise<UploadFilesResponse> {
    return this.rpc.unary(ClassManagerUploadFilesDesc, UploadFilesRequest.fromPartial(request), metadata);
  }
}

export const ClassManagerDesc = { serviceName: "aiAPI.ClassManager" };

export const ClassManagerUploadFilesDesc: UnaryMethodDefinitionish = {
  methodName: "UploadFiles",
  service: ClassManagerDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UploadFilesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UploadFilesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
